# query
type Query {
  hello(name: String): String!
  # end example demo
  getAvatar: [Avatar]
  getBadges: [Badge]
  getComments: Comment
  getDiscussions: [Discussion]
  getNotifications: [Notification]
  getProjects: [Project]
  getReplies: [Reply]
  getScores: [Score]
  # getTags: [Tag]
  getTasks: [Task]
  getTeams: [Team]
  getUsers: [User]
}

# mutation
type Mutation {
  addAvatar(input: AvatarInput): Avatar
  addBadge(input: BadgeInput): Badge
  addComment(input: CommentInput): Comment
  addDiscussion(input: DiscussionInput): Discussion
  addNotification(input: NotificationInput): Notification
  addProject(input: ProjectInput): Project
  addReply(input: ReplyInput): Reply
  addScore(input: ScoreInput): Score
  # addTag(input: TagInput): Tag
  addTask(input: TaskInput): Task
  addTeam(input: TeamInput): Team
  addUser(input: UserInput): User
}

# input
input AvatarInput {
  smallUrl: String
  mediumUrl: String
  largeUrl: String
}

input BadgeInput {
  name: String
}

input CommentInput {
  body: String
  createdAt: String
  createdBy: UserInput
  upvote: Int
  replies: [ReplyInput]
}

input DiscussionInput {
  body: String
  createdAt: String
  createdBy: UserInput
  upvote: Int
  replies: [ReplyInput]
}

# input LevelInput {
#
# }

input NotificationInput {
  name: String
}

input ProjectInput {
  displayName: String
  name: String
  description: String
  avatar: AvatarInput
  memberList: [UserInput]
  taskList: [TaskInput]
  createdAt: String
  createdBy: UserInput
}

input ReplyInput {
  body: String
  createdAt: String
  createdBy: UserInput
  upvote: Int
}

input ScoreInput {
  gold: Int
  silver: Int
  bronze: Int
}

# input StatusInput {
#
# }

# input TagInput {
#
# }

input TaskInput {
  title: String
  subtitle: String
  # tags: [Tag]
  # status: StatusInput
  parent: [TaskInput]
  children: [TaskInput]
  assignedTo: [UserInput]
  # level: LevelInput
  dueDate: String
  involvedUsers: [UserInput]
  comments: [CommentInput]
  createdAt: String
  createdBy: UserInput
}

input TeamInput {
  displayName: String
  name: String
  description: String
  avatar: AvatarInput
  memberList: [UserInput]
  projectList: [ProjectInput]
  createdAt: String
  createdBy: UserInput
}

input UserInput {
  displayName: String
  name: String
  email: String
  password: String
  avatar: AvatarInput
  team: TeamInput
  projects: [ProjectInput]
  notification: [NotificationInput]
  score: ScoreInput
  badge: BadgeInput
  createdAt: String
}

# type
type Avatar {
  smallUrl: String
  mediumUrl: String
  largeUrl: String
}

type Badge {
  id: String
  name: String
}

type Comment {
  id: String
  body: String
  createdAt: String
  createdBy: User
  upvote: Int
  replies: [Reply]
}


type Discussion {
  id: String
  body: String
  createdAt: String
  createdBy: User
  upvote: Int
  replies: [Reply]
}

type Notification {
  id: String
  name: String
}

type Project {
  id: String
  displayName: String
  name: String
  description: String
  avatar: Avatar
  memberList: [User]
  taskList: [Task]
  createdAt: String
  createdBy: User
}

type Reply {
  id: String
  body: String
  createdAt: String
  createdBy: User
  upvote: Int
}

type Score {
  gold: Int
  silver: Int
  bronze: Int
}

type Task {
  id: String
  title: String
  subtitle: String
  tags: [Tag]
  status: Status
  parent: [Task]
  children: [Task]
  assignedTo: [User]
  level: Level
  dueDate: String
  involvedUsers: [User]
  comments: [Comment]
  createdAt: String
  createdBy: User
}

type Team {
  id: String
  displayName: String
  name: String
  description: String
  avatar: Avatar
  memberList: [User]
  projectList: [Project]
  createdAt: String
  createdBy: User
}

type User {
  id: String
  displayName: String
  name: String
  email: String
  password: String
  avatar: Avatar
  team: Team
  projects: [Project]
  notifications: [Notification]
  scores: Score
  badges: [Badge]
  createdAt: String
}

# enum type
enum Level {
  EASY
  MEDIUM
  HARD
}

enum Tag {
  TEST
  JOG
  RUNNING
}

enum Status {
  TODO
  INPPROGRESS
  DONE
}
